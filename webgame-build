#!/usr/bin/python3

'''Compiler for webgames.  This program does the following: {{{

- Create a directory that contains all files required for running the game.
- Inject code into html and js files to load all assets.
- Add header and footer to main file so it is an executable.
- Run the newly built server.

The result is placed in the location for webgames,
$(XDG_DATA_HOME)/python3-webgame by default.  Under there, the game is placed
named game, the assets are placed in html/webgame/, and extra python files are
placed under modules/webgame/.  The generated header in the executable adds that
path to the module search path if it is created.

If modules that are used by the builder are included from the main source
directory, they are copied into the build directory.  network, websocketd and
webgame are imported so this method can be used for them.

<GAMENAME>
modules/webgame/*.py
html/mgrl.js
html/gl-matrix.js
html/builders.js
html/rpc.js
html/webgame.js
html/webgame.css
html/webgame/*.js
html/webgame/*.css
html/webgame/index.html
html/webgame/img/*.png
html/webgame/jta/*.jta
...
}}}'''

# Imports and config. {{{
import fhs
import network
from network import log
import websocketd
import sys
import os
import shutil
import json
import subprocess
import io
import gettext

fhs.option('src', 'source directory', default = '.')
fhs.option('dest', 'destination directory', default = '')
fhs.option('copy', 'copy files (default is symlink)', argtype = bool)
fhs.option('name', 'game name (default is program name)', default = '')
fhs.option('base', 'website base URI', default = '')
fhs.option('build-only', 'do not run the game after building', argtype = bool)
fhs.option('forbidden-exts', 'never load files with these extentions (comma-separated list)', default = '.blend,.blend1,~')
fhs.option('port', 'run on this port')
config = fhs.init(game = True, packagename = 'python3-webgame')
forbidden_exts = config['forbidden-exts'].split(',')
# }}}

# Find source files. {{{
dest = config['dest'] or fhs.write_data('webgame', dir = True, opened = False)
main = [x for x in os.listdir(config['src']) if os.path.splitext(x)[1] == os.extsep + 'gpy' and not os.path.isdir(os.path.join(config['src'], x))]
if len(main) != 1:
	sys.stderr.write('only one main file allowed; found ' + ', '.join(main) + '\n')
	sys.exit(1)
main = os.path.splitext(main[0])[0]
name = config['name'] or main.capitalize()
modules = [x for x in os.listdir(config['src']) if x.endswith(os.extsep + 'py') and not os.path.isdir(os.path.join(config['src'], x))]
jssrc = os.path.join(config['src'], 'html')
if os.path.isdir(jssrc):
	js = [x for x in os.listdir(jssrc) if x.endswith(os.extsep + 'js') and not os.path.isdir(os.path.join(jssrc, x))]
	css = [x for x in os.listdir(jssrc) if x.endswith(os.extsep + 'css') and not os.path.isdir(os.path.join(jssrc, x))]
else:
	log('Warning: no html directory found in {}; game will be useless'.format(config['src']))
	js = []
	css = []
js.sort()
css.sort()
# }}}

# Create destination directory. {{{
if os.path.exists(os.path.join(dest)):
	shutil.rmtree(os.path.join(dest))
os.makedirs(os.path.join(dest, 'html', 'webgame'))
# }}}

def copy(src, dst): # {{{
	assert src and os.path.exists(src)
	src = os.path.abspath(src)
	dst = os.path.abspath(dst)
	base = os.path.dirname(dst)
	if not os.path.isdir(base):
		os.makedirs(base)
	if config['copy']:
		if os.path.exists(dst):
			shutil.deltree(dst)
		shutil.copytree(src, dst)
	else:
		if os.path.exists(dst):
			os.unlink(dst)
		os.symlink(src, dst, os.path.isdir(src))
# }}}

# Write javascript and css files. {{{
for j in js:
	copy(os.path.join(jssrc, j), os.path.join(dest, 'html', 'webgame', j))
for j in css:
	copy(os.path.join(jssrc, j), os.path.join(dest, 'html', 'webgame', j))
# }}}

# Merge, compile and install translations. {{{
sysdir = fhs.read_data('po', dir = True)
syslang = {os.path.splitext(f)[0] for f in os.listdir(sysdir) if os.path.splitext(f)[1] == os.extsep + 'po'}
gamedir = os.path.join(config['src'], 'po')
if os.path.isdir(gamedir):
	gamelang = {os.path.splitext(f)[0] for f in os.listdir(gamedir)}
else:
	gamelang = set()
missed_system = syslang.difference(gamelang)
missed_game = gamelang.difference(syslang)
languages = syslang.intersection(gamelang)
if len(missed_system) > 0:
	log('Warning: No game translation provided for language(s): %s' % ', '.join(missed_system))
if len(missed_game) > 0:
	log('=============================================================\nWarning: No system translation provided for language(s): %s\nGame translation will not be available for those language(s).\n=============================================================' % ', '.join(missed_game))
for lang in languages:
	syspo = os.path.join(sysdir, lang + os.extsep + 'po') if sysdir is not None else None
	gamepo = os.path.join(gamedir, lang + os.extsep + 'po') if gamedir is not None else None
	merged = [po for po in (syspo, gamepo) if po is not None and os.path.exists(po)]
	data = subprocess.run('msgcat {} | msgfmt -o - -'.format(' '.join(merged)), shell = True, close_fds = True, stdout = subprocess.PIPE).stdout
	try:
		terms = gettext.GNUTranslations()
		terms._parse(io.BytesIO(data))
	except:
		continue
	os.makedirs(os.path.join(dest, 'html', 'webgame', 'lang'))
	def escape(s):
		return s.replace('\n', '\\n').replace('"', '\\"')
	with open(os.path.join(dest, 'html', 'webgame', 'lang', lang + '.js'), 'w') as f:
		f.write('_webgame.translations["%s"] = {\n' % lang)
		f.write(',\n'.join('"' + escape(k) + '": "' + escape(v) + '"' for k, v in terms._catalog.items()))
		f.write('\n};\n')
# }}}

# Write or link python modules. {{{
if len(modules) > 0:
	os.makedirs(os.path.join(dest, 'modules'))
	for m in modules:
		copy(os.path.join(config['src'], m), os.path.join(dest, 'modules', m))
# }}}

def find(srcbase, destbase, prefix, antisuffix, specific): # {{{
	'''Find files in some directory.
	srcbase is a directory like <jssrc>/img-2d
	destbase is a directory like <dest>/html/webgame/img
	prefix is the base directory for this subdir search (used for recursive calls).
	antisuffix is the suffix for files to ignore, like -3d
	specific is a suffix string to indicate the dimensionality, or None if not specific. It's only passed into the output.

	Returns a list of 4-tuples: (source file, dest file, dest url to be used from javascript, specific)
	'''
	if not os.path.exists(srcbase):
		return []
	files = os.listdir(srcbase)
	subdirs = [x for x in files if os.path.isdir(os.path.join(srcbase, x))]
	ret = [(os.path.join(srcbase, x), os.path.join(destbase, x), prefix + '/' + x if len(prefix) > 0 else x, specific) for x in files if not x.startswith('.') and not os.path.isdir(os.path.join(srcbase, x)) and not os.path.splitext(x)[0].endswith(antisuffix) and os.path.splitext(x)[1] not in forbidden_exts]
	for sd in subdirs:
		ret.extend(find(os.path.join(srcbase, sd), os.path.join(destbase, sd), prefix + '/' + sd if len(prefix) > 0 else sd, antisuffix, specific))
	return ret
# }}}

# Build list of loaded files. {{{
loader = [(), ()]
can = [False, False]
targets = [[], []]
for suffix, antisuffix, use_3d in (('-2d', '-3d', False), ('-3d', '-2d', True)):
	for base in ('img', 'jta', 'gani', 'audio', 'text'):
		suffixtargets = find(os.path.join(jssrc, base + suffix), os.path.join(dest, 'html', 'webgame', base), '', antisuffix, suffix)
		can[use_3d] = can[use_3d] or os.path.exists(os.path.join(jssrc, base + suffix))
		targets[use_3d].extend(suffixtargets)
		targets[use_3d].extend(find(os.path.join(jssrc, base), os.path.join(dest, 'html', 'webgame', base), '', antisuffix, None))
	if len(targets[use_3d]) > 0:
		can[use_3d] = can[use_3d] or any(os.path.splitext(x[0])[0].endswith(suffix) for x in targets[use_3d])
		loader[use_3d] = [(f[3], f[2]) for f in targets[use_3d]]
# }}}

# Write config.txt. {{{
if not any(can) or all(can):
	use3d = True
	full_loader = set(loader[True]).union(set(loader[False]))
	for t in targets[False]:
		copy(t[0], t[1])
	for t in targets[True]:
		copy(t[0], t[1])
elif can[False]:
	use3d = False
	full_loader = set(loader[False])
	for t in targets[False]:
		copy(t[0], t[1])
else:
	use3d = True
	full_loader = set(loader[True])
	for t in targets[True]:
		copy(t[0], t[1])

full_loader = list(full_loader)
full_loader.sort(key = lambda x: ([None, '-2d', '-3d'].index(x[0]), x[1]))

scripts = ['webgame/{}'.format(f) for f in js] + ['webgame/lang/{}.js'.format(lang) for lang in languages]
scripts.sort()
styles = ['webgame/{}'.format(f) for f in css]
styles.sort()

with open(os.path.join(dest, 'html', 'config' + os.extsep + 'txt'), 'w') as f:
	f.write('title: %s\n' % name)
	f.write('use3d: %s\n' % use3d)
	if config['base']:
		f.write('base: %s\n' % config['base'])
	for l in full_loader:
		if l[0] is None:
			f.write('load: %s\n' % l[1])
		elif l[0] == '-3d':
			f.write('load3d: %s\n' % l[1])
		else:
			f.write('load2d: %s\n' % l[1])
	for script in scripts:
		f.write('script: %s\n' % script)
	for style in styles:
		f.write('style: %s\n' % style)
# }}}

# Copy or link system files. {{{
copy(fhs.read_data('rpc' + os.extsep + 'js', packagename = 'python3-websocketd', opened = False), os.path.join(dest, 'html', 'rpc' + os.extsep + 'js'))
copy(fhs.read_data(os.path.join('html', 'webgame' + os.extsep + 'js'), opened = False), os.path.join(dest, 'html', 'webgame' + os.extsep + 'js'))
copy(fhs.read_data(os.path.join('html', 'webgame' + os.extsep + 'css'), opened = False), os.path.join(dest, 'html', 'webgame' + os.extsep + 'css'))
copy(fhs.read_data(os.path.join('html', 'gl-matrix' + os.extsep + 'js'), opened = False), os.path.join(dest, 'html', 'gl-matrix' + os.extsep + 'js'))
copy(fhs.read_data(os.path.join('html', 'mgrl' + os.extsep + 'js'), opened = False), os.path.join(dest, 'html', 'mgrl' + os.extsep + 'js'))
copy(fhs.read_data('builders' + os.extsep + 'js', opened = False, packagename = 'python3-websocketd'), os.path.join(dest, 'html', 'builders' + os.extsep + 'js'))
copy(fhs.read_data(os.path.join('html', 'index' + os.extsep + 'html'), opened = False), os.path.join(dest, 'html', 'index' + os.extsep + 'html'))
copy(fhs.read_data('webgame', opened = False), os.path.join(dest, main))
# }}}

# Write main python file. {{{
copy(os.path.join(config['src'], main + os.extsep + 'gpy'), os.path.join(dest, 'game' + os.extsep + 'py'))
# }}}

# Copy bundled modules. {{{
mydir = os.path.realpath(os.path.dirname(sys.argv[0]))
for m in sys.modules:
	if m == '__main__':
		continue
	if not hasattr(sys.modules[m], '__file__'):
		#log('no file: {}'.format(m))
		continue
	if os.path.realpath(os.path.dirname(sys.modules[m].__file__)) != mydir:
		#log('wrong dir: {} {}'.format(mydir, sys.modules[m].__file__))
		continue
	target = os.path.join(dest, 'modules')
	if not os.path.exists(target):
		os.mkdir(target)
	#shutil.copy2(sys.modules[m].__file__, os.path.join(target, os.path.basename(sys.modules[m].__file__)))
	copy(sys.modules[m].__file__, os.path.join(target, os.path.basename(sys.modules[m].__file__)))
# }}}

# Run. {{{
if not config['build-only']:
	subprocess.Popen([os.path.join(dest, main)] + ([] if config['port'] is None else ['--webgame-port', config['port']]), close_fds = True).communicate()
# }}}

# vim: set foldmethod=marker :
